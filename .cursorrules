### Interactive JS: module map and rules

- **Entry**: `analysis/static/analysis/js/interactive/index.js`
  - Boots on DOMContentLoaded: `setupWordsEvents`, `setupSentenceEvents`, `setupAnalysis`
  - Exposes `window.handleFinishAnalysis`

- **State**: `analysis/static/analysis/js/interactive/state.js`
  - `state`: { `recallInteractions`: Array<[koreanWord, hadLookup]>; `recallBatchTimeout`: number|null; `hoveredWords`: Set<string>; `displayedVocabWords`: Set<string>; `isAnalysisFinished`: boolean }

- **UI**: `analysis/static/analysis/js/interactive/ui.js`
  - `decodeHTMLEntities(text)`
  - `showNotification(message, type)`
  - `showSentenceTranslation(element, translation)` / `hideSentenceTranslation()`

- **Recall**: `analysis/static/analysis/js/interactive/recall.js`
  - `addRecallInteraction(koreanWord, hadLookup)`
  - `sendBatchRecallUpdates()`
  - POST `/analysis/batch-update-recalls/` with `{ interactions: Array<[word, hadLookup]> }`

- **Vocabulary**: `analysis/static/analysis/js/interactive/vocabulary.js`
  - `saveToVocabulary(koreanWord, pos, grammarInfo, translation)`
  - POST `/users/save-vocabulary/` (FormData)
  - On success: marks `.interactive-word` elements `in-vocab` and highlights

- **Interactions**: `analysis/static/analysis/js/interactive/interactions.js`
  - `setupWordsEvents()`
    - Initializes `state.displayedVocabWords` from DOM
    - Binds hover to track dwell via POST `/analysis/track-hover/`
    - Adds recall interactions for in-vocab/highlighted words
    - Binds click: if in vocab → notification and recall; else → `saveToVocabulary`
    - Binds analyze form submit → `handleAnalyzeSubmit()`
  - `setupSentenceEvents()`
    - Binds hover on `.sentence-punctuation` → show tooltip, POST `/analysis/track-sentence-hover/`

- **Analysis lifecycle**: `analysis/static/analysis/js/interactive/analysis.js`
  - `handleAnalyzeSubmit()`
    - Validates non-empty text, shows spinner, disables button
  - `handleFinishAnalysis()`
    - POST `/analysis/finish-analysis/` with `{ text }`
    - Sets `state.isAnalysisFinished = true`, calls `finishAnalysis()`, reloads
  - `finishAnalysis()`
    - For words shown but not hovered, POST batch recalls with `hadLookup=false`
    - Sets `state.isAnalysisFinished = true`
  - `setupAnalysis()`
    - Guards: `beforeunload`, `visibilitychange`, link click confirmation → `finishAnalysis()`
    - MutationObserver + delayed bind to attach click on `#finish-analysis-btn`

- **OCR Image Analysis**: `analysis/static/analysis/js/image_analysis.js`
  - `ImageAnalysis` class handles image upload, OCR processing, and text extraction
  - Drag & drop support for image files
  - Confidence threshold slider for OCR accuracy control
  - Integrates with existing interactive system via `interactive/index.js`
  - POST `/analysis/image-analysis/` with FormData `{ image, confidence }`
  - Displays extracted text with word-level bounding boxes and confidence scores

### Template integration
- `analysis/templates/analysis/page1.html`
  - Loads `<script type="module" src="{% static 'analysis/js/interactive/index.js' %}"></script>`
  - Includes `#finish-analysis-btn` with `data-text` used by finish flow

### Conventions and extension rules
- **Keep functions small**: target under 20 lines, single input and output where feasible.
- **State**: mutate only via `state` object. Do not create parallel globals.
- **Network**: use existing endpoints and payload shapes; batch recalls in `recall.js` or `analysis.js`.
- **Events**: add new DOM listeners inside `setupWordsEvents`, `setupSentenceEvents`, or `setupAnalysis`.
- **UI**: use `showNotification` for user feedback; use `ui.js` for tooltip/HTML decoding.
- **Globals**: if a function must be callable from HTML, expose it via `window.*` in `index.js`.

### OCR Module Organization
- **Image Handling** (`image_handling.py`): Image loading, conversion between formats (PIL, OpenCV, CoreGraphics)
- **OCR Processing** (`ocr_processing.py`): Vision framework integration, text extraction, and processing pipeline
- **Main Interface** (`ocr_utils.py`): Imports and re-exports all functions for backward compatibility
- **Extension Pattern**: Add new functions to appropriate module, then add to `__all__` in `ocr_utils.py`

### Common tasks
- **Add a new tracked interaction**: implement POST in `interactions.js`, call from appropriate event in `setup*`.
- **Add finish-step work**: append logic in `finishAnalysis()` after recalls are posted.
- **Add new vocab-side effect**: extend `saveToVocabulary()` post-success DOM updates. 
- **Add new OCR preprocessing step**: extend `process_image_file()` in `ocr_processing.py` before Vision framework processing.
- **Add new OCR post-processing**: extend `extract_text_from_cgimage()` in `ocr_processing.py` to filter or transform extracted text data.
- **Add new image format support**: extend `load_image_pil()` in `image_handling.py` to handle additional image types or preprocessing.
- **Modify Vision framework settings**: update `setup_vision_request()` in `ocr_processing.py` for recognition parameters.

### Backend app map

- Analysis (`analysis`)
  - URLs: `analysis/urls.py`
    - `page1/` → `analyze_view`
    - `image-analysis/` → `image_analysis_view`
    - `track-hover/` → `track_hover` (login required, JSON)
    - `track-sentence-hover/` → `track_sentence_hover` (login required, JSON)
    - `finish-analysis/` → `finish_analysis_view` (login required, JSON)
    - `batch-update-recalls/` → `batch_update_recalls_view` (login required, JSON)
  - Views: `analysis/views.py`
    - `analyze_view` POST reads `textinput`, uses `mecab_utils` to analyze/translate, builds `interactive_html` and `analyzed_text` context, renders `analysis/page1.html`
    - `image_analysis_view` handles image uploads and OCR processing, renders `analysis/image_analysis.html`
    - `handle_ocr_request` processes uploaded images via OCR, returns JSON with extracted text data
    - `track_hover` updates hover stats on `Vocabulary`
    - `track_sentence_hover` acknowledges sentence hover (no persistence)
    - `finish_analysis_view` adds unseen analyzed words to `Vocabulary` with alpha=10, beta=0 (or updates), returns count
    - `batch_update_recalls_view` updates recall via `vocab.bayesian_recall.update_vocabulary_recall`
  - Templates: `analysis/templates/analysis/page1.html`
    - Loads `interactive/index.js` as module, includes `#finish-analysis-btn`, renders `interactive_html`
  - Templates: `analysis/templates/analysis/image_analysis.html`
    - Loads `image_analysis.js` and `interactive/index.js`, provides image upload interface with confidence controls
  - Utilities: `analysis/mecab_utils.py`
    - MeCab parsing (`analyze_sentence`, `analyze_token`), translation via Papago with caching in `GlobalTranslation`
    - HTML builders: `create_interactive_sentence`, `create_interactive_text_with_sentences`
  - OCR Utilities: `analysis/ocr_utils.py`
    - **Image Handling**: `analysis/image_handling.py`
      - `load_image_pil`, `create_cgimage_direct`, `create_cgimage_from_pil`
    - **OCR Processing**: `analysis/ocr_processing.py`
      - `setup_vision_request`, `extract_text_from_cgimage`, `ocr_image`, `get_ocr_text_only`, `process_image_file`
    - **Main Interface**: `analysis/ocr_utils.py` imports and re-exports all functions for backward compatibility

- Users (`users`)
  - URLs: `users/urls.py`: `login/`, `logout/`, `register/`, `profile/`, `save-vocabulary/`
  - Views: `users/views.py`
    - Auth flows via Django forms
    - `profile_view` lists `Vocabulary`
    - `save_vocabulary_view` creates/updates `Vocabulary`; on create primes recall via `update_vocabulary_recall(had_lookup=True)`

- Vocabulary (`vocab`)
  - Models: `vocab/models.py`
    - `GlobalTranslation` (cache with `usage_count`)
    - `Vocabulary` (unique by `user` + `korean_word`, hover stats, recall priors, helpers: `add_hover_duration`, `get_average_duration`)
  - Recall: `vocab/bayesian_recall.py`
    - `update_vocabulary_recall(vocab_entry, had_lookup)` updates `retention_rate`, successes/failures, timestamps
    - `batch_update_recalls(user, interactions)` bulk updates
  - Management: `vocab/management/commands/update_recall_rates.py`
    - CLI to backfill/update recalls and priors

- Project
  - Root URLs: `jorp/urls.py`
    - Home `/` → `analyze_view`, includes `analysis/` and `users/`
  - Settings: `jorp/settings.py`
    - Static: `STATICFILES_DIRS`, `STATIC_ROOT`, whitenoise
    - Auth redirects, CSRF trusted origins, SQLite by default, optional Postgres via `DATABASE_URL`

### Endpoints used by JS
- `POST /analysis/track-hover/` `{ korean_word, duration }`
- `POST /analysis/track-sentence-hover/` `{ punctuation, duration }`
- `POST /analysis/finish-analysis/` `{ text }`
- `POST /analysis/batch-update-recalls/` `{ interactions: Array<[word, hadLookup]> }`
- `POST /analysis/image-analysis/` (FormData: `image`, `confidence`)
- `POST /users/save-vocabulary/` (FormData: `korean_word,pos,grammar_info,translation`)

### Safe-change checklist
- Add URLs in app `urls.py`, implement in `views.py`, return `{ success: bool, ... }` JSON
- Wire client calls inside `interactions.js` or `analysis.js`
- Prefer updating `state` for cross-module flags; avoid globals
- Keep functions small, single input/output where feasible; avoid comments in code per project rules 